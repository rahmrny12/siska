/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import ComponentUI.MessageDialog;
import ComponentUI.Transaction.TopPanel;
import Helper.KartuStok;
import Helper.Struk;
import Helper.UserInfo;
import Model.BahanMenu;
import Model.Menu;
import Model.OrderItem;
import Model.Topping;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.sql.Time;
import java.text.ParseException;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.LinkedHashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author LENOVO
 */
public class FormTransaksi extends javax.swing.JFrame {

    private Connection conn;
    
    private List<Menu> dataMenu = new ArrayList<>();
    private Integer IDUser = null;
    
    /**
     * Creates new form FormTransaksi
     */
    public FormTransaksi() {
        initComponents();
        
        UserInfo user = UserInfo.getInstance();
        IDUser = user.getIDUser();
        
        lblUsername.setText(user.getUsername());
        lblRole.setText(user.getRole());
        
        conn = Helper.Database.OpenConnection();
        
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        leftPanel.setFormTransaksi(this);
        
        loadDataMenu("makanan");
        
        menuList.setMenuActionListener((int id) -> {
            Menu selectedMenu = null;
            for (Menu menu : dataMenu) {
                if (menu.getId() == id) {
                    ArrayList<String> listBahanKurang = new ArrayList<>();
                    
                    for (BahanMenu bahan : menu.getListBahan()) {
                        if (bahan.getStokSaatIni() < bahan.getStokDibutuhkan()) {
                            listBahanKurang.add(bahan.getNamaBahan());
                        }
                    }
                    
                    String bahanKurang = String.join(", ", listBahanKurang);
                    
                    if (!bahanKurang.isEmpty()) {
                        String[] buttonLabels = {"OK"};

                        // Create a new instance of CustomDialog without actions
                        MessageDialog dialog = new MessageDialog(
                            "Success",
                            "Bahan berikut tidak mencukupi: \n" + bahanKurang,
                            buttonLabels,
                            null // Pass null for default behavior (close dialog)
                        );

                        // Show the dialog
                        dialog.showDialog();
                        
                        return;
                    }
                    
                    selectedMenu = menu;
                }
            }
            
            leftPanel.addOrderItem(selectedMenu.getId(), selectedMenu.getNamaMenu(), selectedMenu.getHarga(), selectedMenu.getJenis());
        });
        
        TopPanel topPanel = new TopPanel(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Mendapatkan teks tombol yang diklik (Makanan atau Minuman)
                String filter = ((JButton) e.getSource()).getText();
                // Panggil loadDataMenu dengan jenis filter yang sesuai
                loadDataMenu(filter);
            }
        });

        // mengatur layout
        filterContainerPanel.add(topPanel, BorderLayout.NORTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuPanel = new javax.swing.JPanel();
        btnToTransaksi = new javax.swing.JButton();
        btnToRiwayatTransaksi = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        panelUserProfile = new javax.swing.JPanel();
        lblUsername = new javax.swing.JLabel();
        lblRole = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        transaksi = new javax.swing.JPanel();
        leftPanel = new ComponentUI.Transaction.LeftPanel();
        menuContainerPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        menuList = new ComponentUI.Transaction.MenuPanel();
        filterContainerPanel = new javax.swing.JPanel();
        riwayatTransaksi = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRiwayatTransaksi = new javax.swing.JTable();
        jLabel69 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 51, 51));
        setName("myFrame"); // NOI18N

        menuPanel.setBackground(new java.awt.Color(255, 255, 255));

        btnToTransaksi.setBackground(new java.awt.Color(198, 40, 40));
        btnToTransaksi.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnToTransaksi.setForeground(new java.awt.Color(255, 255, 255));
        btnToTransaksi.setText("Transaksi");
        btnToTransaksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToTransaksiActionPerformed(evt);
            }
        });

        btnToRiwayatTransaksi.setBackground(new java.awt.Color(198, 40, 40));
        btnToRiwayatTransaksi.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnToRiwayatTransaksi.setForeground(new java.awt.Color(255, 255, 255));
        btnToRiwayatTransaksi.setText("Riwayat Transaksi");
        btnToRiwayatTransaksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToRiwayatTransaksiActionPerformed(evt);
            }
        });

        btnLogout.setBackground(new java.awt.Color(204, 204, 204));
        btnLogout.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(102, 102, 102));
        btnLogout.setText("Keluar");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        panelUserProfile.setBackground(new java.awt.Color(255, 255, 255));

        lblUsername.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblUsername.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblUsername.setText("Username");

        lblRole.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRole.setText("Role");

        javax.swing.GroupLayout panelUserProfileLayout = new javax.swing.GroupLayout(panelUserProfile);
        panelUserProfile.setLayout(panelUserProfileLayout);
        panelUserProfileLayout.setHorizontalGroup(
            panelUserProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUserProfileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUserProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblRole, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelUserProfileLayout.setVerticalGroup(
            panelUserProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUserProfileLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUsername)
                .addGap(0, 0, 0)
                .addComponent(lblRole)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnToTransaksi, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnToRiwayatTransaksi)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelUserProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogout)
                .addContainerGap())
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnToTransaksi, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnToRiwayatTransaksi, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(panelUserProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.setBackground(new java.awt.Color(144, 2, 2));
        mainPanel.setLayout(new java.awt.CardLayout());

        jScrollPane4.setViewportView(menuList);

        javax.swing.GroupLayout menuContainerPanelLayout = new javax.swing.GroupLayout(menuContainerPanel);
        menuContainerPanel.setLayout(menuContainerPanelLayout);
        menuContainerPanelLayout.setHorizontalGroup(
            menuContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuContainerPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        menuContainerPanelLayout.setVerticalGroup(
            menuContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuContainerPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        filterContainerPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout transaksiLayout = new javax.swing.GroupLayout(transaksi);
        transaksi.setLayout(transaksiLayout);
        transaksiLayout.setHorizontalGroup(
            transaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(transaksiLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(transaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filterContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(menuContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        transaksiLayout.setVerticalGroup(
            transaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, transaksiLayout.createSequentialGroup()
                .addGroup(transaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(transaksiLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(transaksiLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(filterContainerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(menuContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        mainPanel.add(transaksi, "card2");

        riwayatTransaksi.setBackground(new java.awt.Color(140, 2, 2));

        tblRiwayatTransaksi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Tanggal", "Waktu", "ID Transaksi", "Nama Pelanggan", "No Telp Pelanggan", "Jenis", "Harga"
            }
        ));
        tblRiwayatTransaksi.setRowHeight(40);
        jScrollPane2.setViewportView(tblRiwayatTransaksi);

        jLabel69.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel69.setForeground(new java.awt.Color(255, 255, 255));
        jLabel69.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel69.setText("Riwayat Transaksi");

        javax.swing.GroupLayout riwayatTransaksiLayout = new javax.swing.GroupLayout(riwayatTransaksi);
        riwayatTransaksi.setLayout(riwayatTransaksiLayout);
        riwayatTransaksiLayout.setHorizontalGroup(
            riwayatTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel69, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(riwayatTransaksiLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                .addGap(24, 24, 24))
        );
        riwayatTransaksiLayout.setVerticalGroup(
            riwayatTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, riwayatTransaksiLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel69)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addGap(48, 48, 48))
        );

        mainPanel.add(riwayatTransaksi, "card2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        dispose(); // this will close current login box window

        //this will open a nextpage window.
        FormLogin page = new FormLogin();
        page.setVisible(true);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnToTransaksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToTransaksiActionPerformed
        mainPanel.removeAll();
        mainPanel.repaint();
        mainPanel.revalidate();
        
        mainPanel.add(transaksi);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_btnToTransaksiActionPerformed

    private void btnToRiwayatTransaksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToRiwayatTransaksiActionPerformed
        mainPanel.removeAll();
        mainPanel.repaint();
        mainPanel.revalidate();
        
        mainPanel.add(riwayatTransaksi);
        mainPanel.repaint();
        mainPanel.revalidate();
        
        loadTableRiwayatTransaksi();
    }//GEN-LAST:event_btnToRiwayatTransaksiActionPerformed

    public String generateTransactionId() {
        String transactionId = "TRX001"; // Default format if no previous transactions exist
        String query = "SELECT id_transaksi FROM transaksi ORDER BY id_transaksi DESC LIMIT 1"; // Get the last transaction ID

        try (Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery(query);

            if (rs.next()) {
                // Get the last transaction ID (e.g., TRX001)
                String lastId = rs.getString("id_transaksi");

                // Extract the numeric part after 'TRX'
                String numericPart = lastId.substring(3); // Extract '001' from 'TRX001'

                // Increment the numeric part
                int incrementedValue = Integer.parseInt(numericPart) + 1;

                // Format the new ID with leading zeros if necessary
                transactionId = "TRX" + String.format("%03d", incrementedValue); // TRX002, TRX003, etc.
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Log error or handle it as needed
        }

        return transactionId;
    }

    
    public void submitTransaction(List<OrderItem> orderItems, int totalPembayaran, int totalKembalian, Integer IDPelanggan, String namaPelanggan) {
        PreparedStatement stmt;
        String IDTransaksi = generateTransactionId(); // Get the new transaction ID
        double totalHarga = calculateTotalHarga(orderItems);
        java.sql.Date tanggalTransaksi = new java.sql.Date(System.currentTimeMillis());
        Time waktuTransaksi = new java.sql.Time(System.currentTimeMillis());

        try {
            conn.setAutoCommit(false);
            
            String transaksiQuery = "INSERT INTO transaksi (id_transaksi, id_user, id_pelanggan, jenis_pesanan, total_harga, total_pembayaran, kembalian, tanggal_transaksi, waktu_transaksi, status_pesanan) " +
                        "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            stmt = conn.prepareStatement(transaksiQuery, Statement.RETURN_GENERATED_KEYS);

            stmt.setString(1, IDTransaksi);
            
            if (IDUser == null) {
                stmt.setNull(2, java.sql.Types.INTEGER);  // Handle as NULL in SQL
            } else {
                stmt.setInt(2, IDUser);  // Set actual value if it's not null
            }
            
            if (IDPelanggan == null) {
                stmt.setNull(3, java.sql.Types.INTEGER);  // Handle as NULL in SQL
            } else {
                stmt.setInt(3, IDPelanggan);  // Set actual value if it's not null
            }
            
            stmt.setString(4, "dine_in");
            stmt.setDouble(5, totalHarga);  // Sum of item prices
            stmt.setDouble(6, totalPembayaran);
            stmt.setDouble(7, totalKembalian);
            stmt.setDate(8, tanggalTransaksi);  // Current date
            stmt.setTime(9, waktuTransaksi);  // Current time
            stmt.setString(10, "diproses");

            stmt.executeUpdate();

            // Step 2: Insert into 'detail_transaksi' table
            for (OrderItem item : orderItems) {
                String detailQuery = "INSERT INTO detail_transaksi (id_transaksi, id_menu, kuantitas, harga_jual, subtotal, topping, harga_topping, level) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                stmt = conn.prepareStatement(detailQuery);

                stmt.setString(1, IDTransaksi);
                stmt.setInt(2, item.getId());  // Assuming item.getId() corresponds to the menu ID
                stmt.setInt(3, item.getKuantitas());
                stmt.setDouble(4, item.getHarga());
                stmt.setDouble(5, item.getHarga() * item.getKuantitas());
                
                List<Topping> toppings = item.getToppings();
                String toppingString = toppings.stream()
                        .map(topping -> topping.getNamaTopping()+ " x" + topping.getJumlahTopping()) // Format each topping
                        .collect(java.util.stream.Collectors.joining(", ")); // Join them with a comma
                item.addStringTopping(toppingString);
                
                stmt.setString(6, toppingString);
                
                // Hitung total harga topping
                int totalHargaTopping = toppings.stream()
                        .mapToInt(topping -> topping.getHargaTopping() * topping.getJumlahTopping()) // Kalikan harga per topping dengan jumlahnya
                        .sum(); // Total harga semua topping
                stmt.setInt(7, totalHargaTopping);
                item.addTotalHargaToppings(totalHargaTopping);
                
                String levelString = String.join(",", item.getLevels());
                stmt.setString(8, levelString);

                stmt.executeUpdate();
                
                // update stok bahan menu
                String fetchBahanQuery = "SELECT bm.id_bahan, b.nama_bahan, bm.jumlah_bahan " +
                         "FROM bahan_menu bm " +
                         "INNER JOIN bahan b ON bm.id_bahan = b.id_bahan " +
                         "WHERE bm.id_menu = ?";
                PreparedStatement fetchStmt = conn.prepareStatement(fetchBahanQuery);
                fetchStmt.setInt(1, item.getId());
                ResultSet rs = fetchStmt.executeQuery();

                while (rs.next()) {
                    int idBahan = rs.getInt("id_bahan");
                    String namaBahan = rs.getString("nama_bahan");
                    int jumlahPerPorsi = rs.getInt("jumlah_bahan");

                    // Calculate total quantity required
                    int totalRequired = jumlahPerPorsi * item.getKuantitas();

                    // Check stock
                    String checkStockQuery = "SELECT stok_bahan FROM bahan WHERE id_bahan = ?";
                    PreparedStatement checkStockStmt = conn.prepareStatement(checkStockQuery);
                    checkStockStmt.setInt(1, idBahan);
                    ResultSet stockRs = checkStockStmt.executeQuery();

                    if (stockRs.next()) {
                        int currentStock = stockRs.getInt("stok_bahan");

                        if (currentStock < totalRequired) {
                            throw new SQLException("Stok tidak mencukupi untuk bahan berikut: " + namaBahan);
                        }

                        // Update stock
                        String updateStockQuery = "UPDATE bahan SET stok_bahan = stok_bahan - ? WHERE id_bahan = ?";
                        PreparedStatement updateStockStmt = conn.prepareStatement(updateStockQuery);
                        updateStockStmt.setInt(1, totalRequired);
                        updateStockStmt.setInt(2, idBahan);
                        updateStockStmt.executeUpdate();
                        
                        String keterangan = "Transaksi";
                        int jumlahMasuk = 0;
                        int jumlahKeluar = totalRequired;

                        KartuStok.insertKartuStok(conn, idBahan, keterangan, jumlahMasuk, jumlahKeluar, "transaksi");
                    } else {
                        throw new SQLException("Bahan dengan ID: " + idBahan + " tidak ditemukan.");
                    }
                }
            }
            
            conn.commit();

            String[] buttonLabels = {"OK"};

            // Create a new instance of CustomDialog without actions
            MessageDialog dialog = new MessageDialog(
                "Success",
                "Pembayaran Berhasil dari transaksi!\nTotal Pembayaran: Rp. " + totalPembayaran +
                            "\nKembalian: Rp. " + totalKembalian,
                buttonLabels,
                null // Pass null for default behavior (close dialog)
            );

            // Show the dialog
            dialog.showDialog();
            
            Struk.saveAsPDF(IDTransaksi, tanggalTransaksi, waktuTransaksi, namaPelanggan, orderItems, totalHarga, totalPembayaran, totalKembalian);
            
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException ex) {}
            
            JOptionPane.showMessageDialog(null, "Gagal menambahkan transaksi. " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private double calculateTotalHarga(List<OrderItem> orderItems) {
        double totalHarga = 0;
        for (OrderItem item : orderItems) {
            totalHarga += item.getHarga() * item.getKuantitas();
        }
        return totalHarga;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormTransaksi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnToRiwayatTransaksi;
    private javax.swing.JButton btnToTransaksi;
    private javax.swing.JPanel filterContainerPanel;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblUsername;
    private ComponentUI.Transaction.LeftPanel leftPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel menuContainerPanel;
    private ComponentUI.Transaction.MenuPanel menuList;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JPanel panelUserProfile;
    private javax.swing.JPanel riwayatTransaksi;
    private javax.swing.JTable tblRiwayatTransaksi;
    private javax.swing.JPanel transaksi;
    // End of variables declaration//GEN-END:variables

    private void loadDataMenu(String filter) {
        try {
            String query = "SELECT m.id_menu, m.nama_menu, m.harga, m.jenis, b.nama_bahan, b.stok_bahan, bm.jumlah_bahan " +
                       "FROM menu m " +
                       "LEFT JOIN bahan_menu bm ON m.id_menu = bm.id_menu " +
                       "LEFT JOIN bahan b ON bm.id_bahan = b.id_bahan " +
                       "WHERE m.jenis = ?";
            PreparedStatement stmt = conn.prepareStatement(query);

            // Set the value for the placeholder
            stmt.setString(1, filter);

            // Execute the query
            ResultSet res = stmt.executeQuery();
            
            dataMenu.clear();
            Map<Integer, Menu> menuMap = new LinkedHashMap<>();
            
            while (res.next()) {
                int idMenu = res.getInt("id_menu");
                String namaMenu = res.getString("nama_menu");
                double harga = res.getDouble("harga");
                String jenis = res.getString("jenis");
                String namaBahan = res.getString("nama_bahan");
                int stokSaatIni = res.getInt("stok_bahan");
                int stokDibutuhkan = res.getInt("jumlah_bahan");

                if (!menuMap.containsKey(idMenu)) {                  

                // Jika belum ada, tambahkan menu baru
                    Menu newMenu = new Menu(idMenu, namaMenu, harga, jenis);
                    menuMap.put(idMenu, newMenu);
                }
                
                if (namaBahan != null) {
                    BahanMenu bahan = new BahanMenu(namaBahan, stokSaatIni, stokDibutuhkan);
                    Menu existingMenu = menuMap.get(idMenu);
                    existingMenu.getListBahan().add(bahan);
                }
            }
            
            dataMenu.addAll(menuMap.values());
            
            menuList.removeAll();
            menuList.setDataMenu(dataMenu);
            menuList.revalidate();
            menuList.repaint();
        } catch (Exception e) {}
    }

    private void loadTableRiwayatTransaksi() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Tanggal");
        model.addColumn("Waktu");
        model.addColumn("ID Transaksi");
        model.addColumn("Nama Kasir");
        model.addColumn("Nama Pelanggan");
        model.addColumn("No Telp Pelanggan");
        model.addColumn("Jenis");
        model.addColumn("Total Transaksi");
        model.addColumn("Bayar");
        model.addColumn("Kembali");
        model.addColumn("Aksi");

        //Menampilkan data kedalam tabel
        try {
            String query = "SELECT tanggal_transaksi, waktu_transaksi, id_transaksi, user.nama as nama_user, pelanggan.nama as nama_pelanggan, no_telp, jenis_pesanan, total_harga, total_pembayaran, kembalian"
                    + " FROM transaksi"
                    + " LEFT JOIN pelanggan ON transaksi.id_pelanggan = pelanggan.id_pelanggan"
                    + " LEFT JOIN user ON transaksi.id_user = user.id_user"
                    + " ORDER BY tanggal_transaksi DESC, waktu_transaksi DESC";
            Statement stm=conn.createStatement();
            ResultSet res=stm.executeQuery(query);
            while(res.next()){
                model.addRow(new Object[] {
                    res.getString(1),
                    res.getString(2),
                    res.getString(3),
                    res.getString(4) != null ? res.getString(4) : "-",
                    res.getString(5) != null ? res.getString(5) : "-",
                    res.getString(6) != null ? res.getString(6) : "-",
                    res.getString(7).equals("dine_in") ? "Makan di tempat" : "Take Away",
                    "Rp. " + String.valueOf((int) res.getFloat(8)),
                    "Rp. " + String.valueOf((int) res.getFloat(9)),
                    "Rp. " + String.valueOf((int) res.getFloat(10))
                });
            }
            
            tblRiwayatTransaksi.setModel(model);
            
            tblRiwayatTransaksi.getColumnModel().getColumn(10).setCellRenderer(new ButtonRenderer());
            tblRiwayatTransaksi.getColumnModel().getColumn(10).setCellEditor(new ButtonEditor(new JCheckBox()));
        }catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private List<OrderItem> getOrderItemsForTransaction(String idTransaksi) {
        List<OrderItem> orderItems = new ArrayList<>();
        
        try {
            String query = "SELECT * FROM detail_transaksi"
                    + " JOIN menu ON detail_transaksi.id_menu=menu.id_menu WHERE id_transaksi = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, idTransaksi);
            ResultSet res = stmt.executeQuery();

            while (res.next()) {
                int idMenu = res.getInt("id_menu");
                
                OrderItem item = new OrderItem(
                    idMenu,
                    res.getString("nama_menu"),
                    res.getInt("harga"),
                    res.getString("jenis")
                );
                
                item.setKuantitas(res.getInt("kuantitas"));
                item.addStringTopping(res.getString("topping"));
                item.addTotalHargaToppings(res.getInt("harga_topping"));
                item.addLevel(res.getString("level"));
                
                orderItems.add(item);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return orderItems;
    }
    
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
            setMargin(new Insets(5, 10, 5, 10));
            setPreferredSize(new Dimension(100, 30));
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText("Cetak Struk");
            return this;
        }
    }
    
    class ButtonEditor extends DefaultCellEditor {
        private JButton button;
        private String label;
        private boolean isPushed;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton();
            button.setOpaque(true);
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    fireEditingStopped();
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            label = "Cetak Struk";
            button.setText(label);
            isPushed = true;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            if (isPushed) {
                // Remove row
                DefaultTableModel model = (DefaultTableModel) tblRiwayatTransaksi.getModel();
                int selectedRow = tblRiwayatTransaksi.getSelectedRow();
                
                if (selectedRow != -1) {
                    // Get the values from the selected row
                    String idTransaksi = model.getValueAt(selectedRow, 2).toString();
                    String tanggalTransaksi = model.getValueAt(selectedRow, 0).toString();
                    String waktuTransaksi = model.getValueAt(selectedRow, 1).toString();
                    String namaPelanggan = model.getValueAt(selectedRow, 3).toString();
                    double totalHarga = Double.parseDouble(model.getValueAt(selectedRow, 7).toString().replace("Rp. ", "").replace(",", ""));
                    double totalPembayaran = Double.parseDouble(model.getValueAt(selectedRow, 8).toString().replace("Rp. ", "").replace(",", ""));
                    double totalKembalian = Double.parseDouble(model.getValueAt(selectedRow, 9).toString().replace("Rp. ", "").replace(",", ""));
                    
                    // Parse Tanggal (Date) and Waktu (Time)
                    Date parsedDate = new Date();
                    Time parsedTime = Time.valueOf("00:00:00");  // Default time if parsing fails
                    try {
                        // Date parsing
                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");  // Adjust format if needed
                        parsedDate = dateFormat.parse(tanggalTransaksi);
                        
                        // Time parsing
                        DateTimeFormatter timeFormat = DateTimeFormatter.ofPattern("HH:mm:ss");  // Adjust format if needed
                        LocalTime parsedLocalTime = LocalTime.parse(waktuTransaksi, timeFormat);
                        parsedTime = Time.valueOf(parsedLocalTime);
                    } catch (ParseException parseException) {
                        parseException.printStackTrace();
                    }
                    // Assuming you have a method to get order items for the transaction
                    List<OrderItem> orderItems = getOrderItemsForTransaction(idTransaksi);
                    // Generate the PDF with the retrieved data
                    Struk.saveAsPDF(idTransaksi, parsedDate, parsedTime, namaPelanggan, orderItems, totalHarga, totalPembayaran, totalKembalian);
                }
            }
            isPushed = false;
            return label;
        }

        @Override
        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        @Override
        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }
}
